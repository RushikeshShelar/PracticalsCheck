
import math

class DGIM:
    def __init__(self, window_size):
        self.window_size = window_size
        self.buckets = []
    
    def add_bit(self, bit, timestamp):
        if bit == 1:
            self.buckets.insert(0, (timestamp, 1))
            self._merge_buckets()
        self._expire_old_buckets(timestamp)

    def _merge_buckets(self):
        i = 0
        while i < len(self.buckets) - 2:
            if self.buckets[i][1] == self.buckets[i+1][1] == self.buckets[i+2][1]:
                new_bucket = (self.buckets[i+1][0], self.buckets[i+1][1] * 2)
                del self.buckets[i+1:i+3]
                self.buckets.insert(i+1, new_bucket)
            else:
                i += 1

    def _expire_old_buckets(self, current_time):
        while self.buckets and self.buckets[-1][0] <= current_time - self.window_size:
            self.buckets.pop()

    def count_ones(self, current_time):
        total = 0
        for i, (timestamp, size) in enumerate(self.buckets):
            if timestamp <= current_time - self.window_size:
                break
            if i == len(self.buckets) - 1:
                total += size // 2
            else:
                total += size
        return total

    def display_buckets(self):
        print("Final Buckets (timestamp, size):", self.buckets)


window_size = 24
dgim = DGIM(window_size)
stream = [1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 1, 0]

for t, bit in enumerate(stream):
    dgim.add_bit(bit, t)

ones_count = dgim.count_ones(len(stream) - 1)
print(f"\nAt the last bit, number of 1's in the last {window_size} bits: {ones_count}")
dgim.display_buckets()
